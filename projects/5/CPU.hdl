// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:



    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inRegA);
    Not(in=instruction[15], out=Ainstruction);
    Or(a=Ainstruction, b=instruction[5], out=loadRegisterA);
    ARegister(in=inRegA, load=loadRegisterA, out=registerA, out[0..14]=addressM);
    DRegister(in=outALU, load=instruction[4], out=registerD);
    // write to M if C instruction
    And(a=instruction[3], b=instruction[15], out=writeM);


    DMux8Way(in=true, sel=instruction[0..2], a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Or(a=outZero, b=outNeg, out=outZeroOrNeg);
    Not(in=outZeroOrNeg, out=outPositive);
    Not(in=outNeg, out=greaterEqualZero);
    Not(in=outZero, out=notZero);

    And(a=outPositive, b=jgt, out=j1);
    And(a=outZero, b=jeq, out=j2);
    And(a=greaterEqualZero, b=jge, out=j3);
    And(a=outNeg, b=jlt, out=j4);
    And(a=notZero, b=jne, out=j5);
    And(a=outZeroOrNeg, b=jle, out=j6);
    Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, in[3]=j4, in[4]=j5, in[5]=j6, in[6]=jmp, out=j7);
    And(a=instruction[15], b=j7, out=jump);

    PC(in=registerA, load=jump,inc=true,reset=reset, out[0..14] = pc);

    Mux16(a=registerA, b=inM, sel=instruction[12], out=AorM);

    ALU(x=registerD, y=AorM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],f=instruction[7], no=instruction[6],
        out=outALU, out=outM,
        zr=outZero, ng=outNeg);

}
