// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
       let screen = 16384;
       let color = true;

       return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        do Screen.setColor(color);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;

        let address = (32 * y) + (x / 16);
        let mask = Math.twoToThe(x & 15); // x & 15 is same as x mod 16

        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & (~mask);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy;

        if (x1 = x2) {
            if (y1 < y2) {
                do Screen._drawVerticalLine(x1, y1, y2);
            } else {
                do Screen._drawVerticalLine(x1, y2, y1);
            }
            return;
        }

        if (y1 = y2) {
            if (x1 < x2) {
                do Screen._drawHorizontalLine(y1, x1, x2);
            } else {
                do Screen._drawHorizontalLine(y1, x2, x1);
            }
            return;
        }

        if (x1 < x2) {
            do Screen._drawLine(x1, y1, x2 - x1, y2 - y1);
            return;
        }
        if (x1 > x2) {
            do Screen._drawLine(x2, y2, x1 - x2, y1 - y2);
            return;
        }

        do Sys.error(8);

        return;
    }

    function void _drawLine(int x1, int y1, int dx, int dy) {
        var int a, b, diff;

        let a = 0; let b = 0; let diff = 0;

        if (dy > 0) {
            while (~(a > dx) & ~(b > dy)) {
               do Screen.drawPixel(x1 + a, y1 + b);

               if (diff < 0) {
                   let a = a + 1;
                   let diff = diff + dy;
               } else {
                   let b = b + 1;
                   let diff = diff - dx;
                }
            }
        } else {
            let dy = -dy;
            while (~(a > dx) & ~(b > dy)) {
               do Screen.drawPixel(x1 + a, y1 - b);

               if (diff < 0) {
                   let a = a + 1;
                   let diff = diff + dy;
               } else {
                   let b = b + 1;
                   let diff = diff - dx;
                }
            }
        }

        return;
    }

    function void _drawVerticalLine(int x, int y1, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    function void _drawHorizontalLine(int y, int x1, int x2) {
        while (~(x1 > x2)){
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int temp;

        if ((x1 > x2) | (y1 > y2)) {
            do Sys.error(9);
        }

        while (~(y1 > y2)) {
            do Screen._drawHorizontalLine(y1, x1, x2);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        let dy = -r;

        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen._drawHorizontalLine(y + dy, x - dx, x + dx);
            let dy = dy + 1;
        }

        return;
    }
}
